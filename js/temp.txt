const startBtn      = document.getElementById('startBtn');
const startScreen   = document.getElementById('startScreen');
const quoteForm     = document.getElementById('quoteForm');
const steps         = Array.from(document.querySelectorAll('.step'));
const nextBtn       = document.getElementById('nextBtn');
const prevBtn       = document.getElementById('prevBtn');
const progress      = document.getElementById('progress');
const progressBar   = document.querySelector('.progress-bar');
const formStepLabel = document.querySelector('.form-step');
const quoteHeading  = document.querySelector('.quote-heading');
const bgCircle      = Array.from(document.querySelectorAll('.circle'));
const slider = document.getElementById("timeline");
const output = document.getElementById("timeline-value");

let current = 0;

// Hide elements until we start
progressBar.classList.add('hidden');
prevBtn.style.opacity = '0';
prevBtn.style.pointerEvents = 'none';
formStepLabel.classList.add('hidden');

// Update the “Step X of Y” label
function updateFormStepLabel() {
  formStepLabel.textContent = `Step ${current + 1} of ${steps.length}`;
}

// Show step `i`, update width, buttons, heading, and gradient
function showStep(i) {
  steps.forEach((step, idx) => {
    step.classList.toggle('hidden', idx !== i);
    step.classList.toggle('active', idx === i);
  });

  // Progress width as percentage
  const pct = (i) / (steps.length - 1) * 100;
  progress.style.width = pct + '%';

  // Add/remove gradient class if on last step
  if (i === steps.length - 1) {
    progress.classList.add('final-step');
    nextBtn.classList.add('hidden');
    bgCircle.forEach(el => el.style.background = "darkgreen");
  } else {
    progress.classList.remove('final-step');
    nextBtn.classList.remove('hidden');
    bgCircle.forEach(el => el.style.background = "");
  }

  // Hide big heading once we leave start
  quoteHeading.classList.add('hidden');
  updateFormStepLabel();

  // Prev button toggle
  if (i === 0) {
    prevBtn.style.opacity = '0';
    prevBtn.style.pointerEvents = 'none';
  } else {
    prevBtn.style.opacity = '1';
    prevBtn.style.pointerEvents = 'auto';
  }

  // ** NEW: Hide .background-orb once we are at the first step or beyond **
  const backgroundOrb = document.querySelector('.background-orb');
  if (backgroundOrb) {
    if (i >= 0) {
      backgroundOrb.classList.add('hidden');
    } else {
      backgroundOrb.classList.remove('hidden');
    }
  }
}


// Start button: hide start screen, show form
startBtn.addEventListener('click', () => {
  startScreen.classList.add('hidden');
  quoteForm.classList.remove('hidden');
  formStepLabel.classList.remove('hidden');
  progressBar.classList.remove('hidden');
  showStep(current);
});

// Next button: validate & advance
nextBtn.addEventListener('click', () => {
  const inputs = steps[current].querySelectorAll('input, textarea');
  const allValid = Array.from(inputs).every(input => input.checkValidity());
  if (!allValid) {
    inputs.forEach(input => input.reportValidity());
    return;
  }

  current++;
  showStep(current);
});

// Prev button: go back
prevBtn.addEventListener('click', () => {
  if (current > 0) {
    current--;
    showStep(current);
  }
});

// Get query parameter from URL
function getQueryParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

// DOMContentLoaded – handle skip logic and Cal button
document.addEventListener("DOMContentLoaded", function () {
  const stepParam = getQueryParam("step");

  if (stepParam === "1") {
    startScreen.classList.add('hidden');
    quoteForm.classList.remove('hidden');
    formStepLabel.classList.remove('hidden');
    progressBar.classList.remove('hidden');
    current = 0;
    showStep(current);
  }

});

(function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
Cal("init", "discovery-call", {origin:"https://cal.com"});
Cal.ns["discovery-call"]("ui", {"hideEventTypeDetails":false,"layout":"month_view"});
  // mail.js

// 1. Initialize EmailJS (replace with your own user ID)
emailjs.init("72yexfrXpqwZWs_yj");

// 2. Attach Cal.com “event scheduled” listener
//    This fires whenever someone actually books via your embed.
Cal("on", "discovery-call", "event_scheduled", async function(eventData) {
try {
  // 3. Calculate the price based on the form values
  //    Assumes calculatePrice() is globally available (from quote.js)
  const estimatedPrice = calculatePrice();

  // 4. Gather all your quote-form data
  //    (Fallback to empty string if element isn’t found)
  const getVal = selector =>
    document.querySelector(selector)?.value?.trim() || "";

  const payload = {
    projectType:       getVal('input[name="projectType"]:checked'),
    pages:             getVal('input[name="pages"]:checked'),
    timelineWeeks:     getVal('#timeline'),
    additionalNotes:   getVal('textarea[name="additionalNotes"]'),
    business:          getVal('input[name="business"]'),
    website:           getVal('input[name="website"]'),
    requesterName:     getVal('input[name="name"]'),
    requesterEmail:    getVal('input[name="email"]'),
    estimatedPrice,                             // from your calc
    callBookingUrl:    eventData.booking.reschedule_url || "", // from Cal payload
    callBookedAt:      eventData.booking.start_time       || "", // ISO timestamp
  };

  // 5. Send via EmailJS (replace service & template IDs with yours)
  await emailjs.send(
    "service_xyivz2l",
    "template_lt94358",
    payload
  );

  alert(
    "✅ Your quote request has been sent! " +
    "Please check your email (and spam folder) for details."
  );
} catch (err) {
  console.error("EmailJS error:", err);
  alert(
    "❌ Oops! Something went wrong sending your quote. " +
    "Please try again or reach out directly."
  );
}
});

document.addEventListener("DOMContentLoaded", () => {
  const slider = document.getElementById("timeline");
  const output = document.getElementById("timeline-value");

  const updateLabel = () => {
    output.textContent = slider.value + (" weeks");
  };

  updateLabel(); 

  slider.addEventListener("input", updateLabel);
});

// Pricing calculation function
function calculatePrice() {
  // Get selected project type
  const projectType = document.querySelector('input[name="projectType"]:checked')?.value;
  const pages = document.querySelector('input[name="pages"]:checked')?.value;
  const timeline = Number(document.getElementById('timeline').value);

  // Base prices
  let basePrice = 20000; // default base price

  if (projectType === 'websiteRedesign') basePrice = 15000;
  else if (projectType === 'newWebsite') basePrice = 20000;
  else if (projectType === 'other') basePrice = 20000;

  // Add price based on number of pages
  let pagesPrice = 0;
  switch (pages) {
    case '1-5':
      pagesPrice = 5000;
      break;
    case '10-20':
      pagesPrice = 12000;
      break;
    case '20+':
      pagesPrice = 20000;
      break;
  }

  // Add price based on timeline (shorter timeline -> higher price)
  // For example, timeline is in weeks from 2 to 10
  // If timeline is 2 weeks, add a premium; if 10 weeks, less/no premium
  let timelinePrice = 0;
  if (timeline <= 4) timelinePrice = (5 - timeline) * 4000; // more premium if faster
  else timelinePrice = 0;

  // Sum total price
  let totalPrice = basePrice + pagesPrice + timelinePrice;

  // Enforce minimum price of 30k
  if (totalPrice < 30000) totalPrice = 30000;

  // No strict max, but let's just cap to 200k max for safety
  if (totalPrice > 200000) totalPrice = 200000;

  return totalPrice;
}

// Example integration: send form and price via emailJS (placeholder)
quoteForm.addEventListener('submit', (e) => {
  e.preventDefault();

  // Validate all inputs before calculating
  const inputs = quoteForm.querySelectorAll('input, textarea');
  const allValid = Array.from(inputs).every(input => input.checkValidity());
  if (!allValid) {
    inputs.forEach(input => input.reportValidity());
    return;
  }

  // Calculate price
  const calculatedPrice = calculatePrice();

  // Prepare data to send
  const formData = new FormData(quoteForm);
  const data = {};
  formData.forEach((value, key) => { data[key] = value; });

  data.estimatedPrice = calculatedPrice;

  emailjs.send('service_xyivz2l', 'template_lt94358', data, '72yexfrXpqwZWs_yj')
    .then(() => alert('Quote sent successfully! Check Spam Folder if'))
    .catch(err => alert('Failed to send quote request: ' + err.text));
});
